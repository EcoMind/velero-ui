{
  "swagger": "2.0",
  "info": {
    "title": "velero",
    "version": "v1.15.2"
  },
  "paths": {
    "/apis/velero.io/v1/namespaces/{namespace}/backups": {
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listNamespacedBackup",
        "description": "list or watch namespace scoped Backup",
        "tags": [
          "v1_backup"
        ],
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "name": "watch",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.BackupList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "createNamespacedBackup",
        "description": "Creates a namespace scoped Backup",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_backup"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to create.",
            "schema": {
              "$ref": "#/definitions/v1.Backup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.Backup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/backups/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "the custom object's name",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getNamespacedBackup",
        "description": "Returns a namespace scoped Backup",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_backup"
        ],
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "$ref": "#/definitions/v1.Backup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespacedBackup",
        "description": "Deletes the specified namespace scoped Backup",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_backup"
        ],
        "parameters": [
          {
            "name": "v1.DeleteOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "patchNamespacedBackup",
        "description": "patch the specified namespace scoped Backup",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_backup"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to patch.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Backup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "operationId": "replaceNamespacedBackup",
        "description": "replace the specified namespace scoped Backup",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_backup"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to replace.",
            "schema": {
              "$ref": "#/definitions/v1.Backup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Backup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/backupstoragelocations": {
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listNamespacedBackupStorageLocation",
        "description": "list or watch namespace scoped BackupStorageLocation",
        "tags": [
          "v1_backupstoragelocation"
        ],
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "name": "watch",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.BackupStorageLocationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "createNamespacedBackupStorageLocation",
        "description": "Creates a namespace scoped BackupStorageLocation",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_backupstoragelocation"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to create.",
            "schema": {
              "$ref": "#/definitions/v1.BackupStorageLocation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.BackupStorageLocation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/backupstoragelocations/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "the custom object's name",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getNamespacedBackupStorageLocation",
        "description": "Returns a namespace scoped BackupStorageLocation",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_backupstoragelocation"
        ],
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "$ref": "#/definitions/v1.BackupStorageLocation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespacedBackupStorageLocation",
        "description": "Deletes the specified namespace scoped BackupStorageLocation",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_backupstoragelocation"
        ],
        "parameters": [
          {
            "name": "v1.DeleteOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "patchNamespacedBackupStorageLocation",
        "description": "patch the specified namespace scoped BackupStorageLocation",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_backupstoragelocation"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to patch.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.BackupStorageLocation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "operationId": "replaceNamespacedBackupStorageLocation",
        "description": "replace the specified namespace scoped BackupStorageLocation",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_backupstoragelocation"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to replace.",
            "schema": {
              "$ref": "#/definitions/v1.BackupStorageLocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.BackupStorageLocation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/deletebackuprequests": {
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listNamespacedDeleteBackupRequest",
        "description": "list or watch namespace scoped DeleteBackupRequest",
        "tags": [
          "v1_deletebackuprequest"
        ],
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "name": "watch",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.DeleteBackupRequestList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "createNamespacedDeleteBackupRequest",
        "description": "Creates a namespace scoped DeleteBackupRequest",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_deletebackuprequest"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to create.",
            "schema": {
              "$ref": "#/definitions/v1.DeleteBackupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.DeleteBackupRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/deletebackuprequests/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "the custom object's name",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getNamespacedDeleteBackupRequest",
        "description": "Returns a namespace scoped DeleteBackupRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_deletebackuprequest"
        ],
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "$ref": "#/definitions/v1.DeleteBackupRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespacedDeleteBackupRequest",
        "description": "Deletes the specified namespace scoped DeleteBackupRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_deletebackuprequest"
        ],
        "parameters": [
          {
            "name": "v1.DeleteOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "patchNamespacedDeleteBackupRequest",
        "description": "patch the specified namespace scoped DeleteBackupRequest",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_deletebackuprequest"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to patch.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.DeleteBackupRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "operationId": "replaceNamespacedDeleteBackupRequest",
        "description": "replace the specified namespace scoped DeleteBackupRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_deletebackuprequest"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to replace.",
            "schema": {
              "$ref": "#/definitions/v1.DeleteBackupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.DeleteBackupRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/downloadrequests": {
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listNamespacedDownloadRequest",
        "description": "list or watch namespace scoped DownloadRequest",
        "tags": [
          "v1_downloadrequest"
        ],
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "name": "watch",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.DownloadRequestList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "createNamespacedDownloadRequest",
        "description": "Creates a namespace scoped DownloadRequest",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_downloadrequest"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to create.",
            "schema": {
              "$ref": "#/definitions/v1.DownloadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.DownloadRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/downloadrequests/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "the custom object's name",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getNamespacedDownloadRequest",
        "description": "Returns a namespace scoped DownloadRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_downloadrequest"
        ],
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "$ref": "#/definitions/v1.DownloadRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespacedDownloadRequest",
        "description": "Deletes the specified namespace scoped DownloadRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_downloadrequest"
        ],
        "parameters": [
          {
            "name": "v1.DeleteOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "patchNamespacedDownloadRequest",
        "description": "patch the specified namespace scoped DownloadRequest",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_downloadrequest"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to patch.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.DownloadRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "operationId": "replaceNamespacedDownloadRequest",
        "description": "replace the specified namespace scoped DownloadRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_downloadrequest"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to replace.",
            "schema": {
              "$ref": "#/definitions/v1.DownloadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.DownloadRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/podvolumebackups": {
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listNamespacedPodVolumeBackup",
        "description": "list or watch namespace scoped PodVolumeBackup",
        "tags": [
          "v1_podvolumebackup"
        ],
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "name": "watch",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeBackupList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "createNamespacedPodVolumeBackup",
        "description": "Creates a namespace scoped PodVolumeBackup",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_podvolumebackup"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to create.",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeBackup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeBackup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/podvolumebackups/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "the custom object's name",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getNamespacedPodVolumeBackup",
        "description": "Returns a namespace scoped PodVolumeBackup",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_podvolumebackup"
        ],
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeBackup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespacedPodVolumeBackup",
        "description": "Deletes the specified namespace scoped PodVolumeBackup",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_podvolumebackup"
        ],
        "parameters": [
          {
            "name": "v1.DeleteOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "patchNamespacedPodVolumeBackup",
        "description": "patch the specified namespace scoped PodVolumeBackup",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_podvolumebackup"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to patch.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeBackup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "operationId": "replaceNamespacedPodVolumeBackup",
        "description": "replace the specified namespace scoped PodVolumeBackup",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_podvolumebackup"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to replace.",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeBackup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeBackup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/podvolumerestores": {
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listNamespacedPodVolumeRestore",
        "description": "list or watch namespace scoped PodVolumeRestore",
        "tags": [
          "v1_podvolumerestore"
        ],
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "name": "watch",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeRestoreList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "createNamespacedPodVolumeRestore",
        "description": "Creates a namespace scoped PodVolumeRestore",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_podvolumerestore"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to create.",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeRestore"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeRestore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/podvolumerestores/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "the custom object's name",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getNamespacedPodVolumeRestore",
        "description": "Returns a namespace scoped PodVolumeRestore",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_podvolumerestore"
        ],
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeRestore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespacedPodVolumeRestore",
        "description": "Deletes the specified namespace scoped PodVolumeRestore",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_podvolumerestore"
        ],
        "parameters": [
          {
            "name": "v1.DeleteOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "patchNamespacedPodVolumeRestore",
        "description": "patch the specified namespace scoped PodVolumeRestore",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_podvolumerestore"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to patch.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeRestore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "operationId": "replaceNamespacedPodVolumeRestore",
        "description": "replace the specified namespace scoped PodVolumeRestore",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_podvolumerestore"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to replace.",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeRestore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodVolumeRestore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/resticrepositories": {
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listNamespacedResticRepository",
        "description": "list or watch namespace scoped ResticRepository",
        "tags": [
          "v1_resticrepository"
        ],
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "name": "watch",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ResticRepositoryList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "createNamespacedResticRepository",
        "description": "Creates a namespace scoped ResticRepository",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_resticrepository"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to create.",
            "schema": {
              "$ref": "#/definitions/v1.ResticRepository"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.ResticRepository"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/resticrepositories/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "the custom object's name",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getNamespacedResticRepository",
        "description": "Returns a namespace scoped ResticRepository",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_resticrepository"
        ],
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "$ref": "#/definitions/v1.ResticRepository"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespacedResticRepository",
        "description": "Deletes the specified namespace scoped ResticRepository",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_resticrepository"
        ],
        "parameters": [
          {
            "name": "v1.DeleteOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "patchNamespacedResticRepository",
        "description": "patch the specified namespace scoped ResticRepository",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_resticrepository"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to patch.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ResticRepository"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "operationId": "replaceNamespacedResticRepository",
        "description": "replace the specified namespace scoped ResticRepository",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_resticrepository"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to replace.",
            "schema": {
              "$ref": "#/definitions/v1.ResticRepository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ResticRepository"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/restores": {
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listNamespacedRestore",
        "description": "list or watch namespace scoped Restore",
        "tags": [
          "v1_restore"
        ],
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "name": "watch",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.RestoreList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "createNamespacedRestore",
        "description": "Creates a namespace scoped Restore",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_restore"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to create.",
            "schema": {
              "$ref": "#/definitions/v1.Restore"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.Restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/restores/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "the custom object's name",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getNamespacedRestore",
        "description": "Returns a namespace scoped Restore",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_restore"
        ],
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "$ref": "#/definitions/v1.Restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespacedRestore",
        "description": "Deletes the specified namespace scoped Restore",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_restore"
        ],
        "parameters": [
          {
            "name": "v1.DeleteOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "patchNamespacedRestore",
        "description": "patch the specified namespace scoped Restore",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_restore"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to patch.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "operationId": "replaceNamespacedRestore",
        "description": "replace the specified namespace scoped Restore",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_restore"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to replace.",
            "schema": {
              "$ref": "#/definitions/v1.Restore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Restore"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/schedules": {
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listNamespacedSchedule",
        "description": "list or watch namespace scoped Schedule",
        "tags": [
          "v1_schedule"
        ],
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "name": "watch",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ScheduleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "createNamespacedSchedule",
        "description": "Creates a namespace scoped Schedule",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_schedule"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to create.",
            "schema": {
              "$ref": "#/definitions/v1.Schedule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.Schedule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/schedules/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "the custom object's name",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getNamespacedSchedule",
        "description": "Returns a namespace scoped Schedule",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_schedule"
        ],
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "$ref": "#/definitions/v1.Schedule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespacedSchedule",
        "description": "Deletes the specified namespace scoped Schedule",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_schedule"
        ],
        "parameters": [
          {
            "name": "v1.DeleteOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "patchNamespacedSchedule",
        "description": "patch the specified namespace scoped Schedule",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_schedule"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to patch.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Schedule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "operationId": "replaceNamespacedSchedule",
        "description": "replace the specified namespace scoped Schedule",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_schedule"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to replace.",
            "schema": {
              "$ref": "#/definitions/v1.Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Schedule"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/serverstatusrequests": {
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listNamespacedServerStatusRequest",
        "description": "list or watch namespace scoped ServerStatusRequest",
        "tags": [
          "v1_serverstatusrequest"
        ],
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "name": "watch",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ServerStatusRequestList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "createNamespacedServerStatusRequest",
        "description": "Creates a namespace scoped ServerStatusRequest",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_serverstatusrequest"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to create.",
            "schema": {
              "$ref": "#/definitions/v1.ServerStatusRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.ServerStatusRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/serverstatusrequests/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "the custom object's name",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getNamespacedServerStatusRequest",
        "description": "Returns a namespace scoped ServerStatusRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_serverstatusrequest"
        ],
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "$ref": "#/definitions/v1.ServerStatusRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespacedServerStatusRequest",
        "description": "Deletes the specified namespace scoped ServerStatusRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_serverstatusrequest"
        ],
        "parameters": [
          {
            "name": "v1.DeleteOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "patchNamespacedServerStatusRequest",
        "description": "patch the specified namespace scoped ServerStatusRequest",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_serverstatusrequest"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to patch.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ServerStatusRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "operationId": "replaceNamespacedServerStatusRequest",
        "description": "replace the specified namespace scoped ServerStatusRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_serverstatusrequest"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to replace.",
            "schema": {
              "$ref": "#/definitions/v1.ServerStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ServerStatusRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/volumesnapshotlocations": {
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        },
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "listNamespacedVolumeSnapshotLocation",
        "description": "list or watch namespace scoped VolumeSnapshotLocation",
        "tags": [
          "v1_volumesnapshotlocation"
        ],
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "name": "watch",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.VolumeSnapshotLocationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "createNamespacedVolumeSnapshotLocation",
        "description": "Creates a namespace scoped VolumeSnapshotLocation",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_volumesnapshotlocation"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to create.",
            "schema": {
              "$ref": "#/definitions/v1.VolumeSnapshotLocation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.VolumeSnapshotLocation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/velero.io/v1/namespaces/{namespace}/volumesnapshotlocations/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "in": "path",
          "required": true,
          "description": "The custom resource's namespace",
          "type": "string"
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "the custom object's name",
          "type": "string"
        }
      ],
      "get": {
        "operationId": "getNamespacedVolumeSnapshotLocation",
        "description": "Returns a namespace scoped VolumeSnapshotLocation",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_volumesnapshotlocation"
        ],
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "$ref": "#/definitions/v1.VolumeSnapshotLocation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespacedVolumeSnapshotLocation",
        "description": "Deletes the specified namespace scoped VolumeSnapshotLocation",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_volumesnapshotlocation"
        ],
        "parameters": [
          {
            "name": "v1.DeleteOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "patchNamespacedVolumeSnapshotLocation",
        "description": "patch the specified namespace scoped VolumeSnapshotLocation",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_volumesnapshotlocation"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to patch.",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.VolumeSnapshotLocation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "operationId": "replaceNamespacedVolumeSnapshotLocation",
        "description": "replace the specified namespace scoped VolumeSnapshotLocation",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1_volumesnapshotlocation"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The JSON schema of the Resource to replace.",
            "schema": {
              "$ref": "#/definitions/v1.VolumeSnapshotLocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.VolumeSnapshotLocation"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "definitions": {
    "v1.Backup": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "description": "BackupStatus captures the current status of a Velero backup.",
          "properties": {
            "completionTimestamp": {
              "description": "CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "errors": {
              "description": "Errors is a count of all error messages that were generated during execution of the backup.  The actual errors are in the backup's log file in object storage.",
              "type": "integer"
            },
            "expiration": {
              "description": "Expiration is when this Backup is eligible for garbage-collection.",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "phase": {
              "description": "Phase is the current state of the Backup.",
              "enum": [
                "New",
                "FailedValidation",
                "InProgress",
                "Completed",
                "PartiallyFailed",
                "Failed",
                "Deleting"
              ],
              "type": "string"
            },
            "startTimestamp": {
              "description": "StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "validationErrors": {
              "description": "ValidationErrors is a slice of all validation errors (if applicable).",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "version": {
              "description": "Version is the backup format version.",
              "type": "integer"
            },
            "volumeSnapshotsAttempted": {
              "description": "VolumeSnapshotsAttempted is the total number of attempted volume snapshots for this backup.",
              "type": "integer"
            },
            "volumeSnapshotsCompleted": {
              "description": "VolumeSnapshotsCompleted is the total number of successfully completed volume snapshots for this backup.",
              "type": "integer"
            },
            "warnings": {
              "description": "Warnings is a count of all warning messages that were generated during execution of the backup. The actual warnings are in the backup's log file in object storage.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "spec": {
          "description": "BackupSpec defines the specification for a Velero backup.",
          "properties": {
            "excludedNamespaces": {
              "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup.",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "excludedResources": {
              "description": "ExcludedResources is a slice of resource names that are not included in the backup.",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "hooks": {
              "description": "Hooks represent custom behaviors that should be executed at different phases of the backup.",
              "properties": {
                "resources": {
                  "description": "Resources are hooks that should be executed when backing up individual instances of a resource.",
                  "items": {
                    "description": "BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.",
                    "properties": {
                      "excludedNamespaces": {
                        "description": "ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                      },
                      "excludedResources": {
                        "description": "ExcludedResources specifies the resources to which this hook spec does not apply.",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                      },
                      "includedNamespaces": {
                        "description": "IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                      },
                      "includedResources": {
                        "description": "IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                      },
                      "labelSelector": {
                        "description": "LabelSelector, if specified, filters the resources to which this hook spec applies.",
                        "nullable": true,
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "name": {
                        "description": "Name is the name of this hook.",
                        "type": "string"
                      },
                      "post": {
                        "description": "PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all \"additional items\" from item actions are processed.",
                        "items": {
                          "description": "BackupResourceHook defines a hook for a resource.",
                          "properties": {
                            "exec": {
                              "description": "Exec defines an exec hook.",
                              "properties": {
                                "command": {
                                  "description": "Command is the command and arguments to execute.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "minItems": 1,
                                  "type": "array"
                                },
                                "container": {
                                  "description": "Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.",
                                  "type": "string"
                                },
                                "onError": {
                                  "description": "OnError specifies how Velero should behave if it encounters an error executing this hook.",
                                  "enum": [
                                    "Continue",
                                    "Fail"
                                  ],
                                  "type": "string"
                                },
                                "timeout": {
                                  "description": "Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "command"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "exec"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "pre": {
                        "description": "PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any \"additional items\" from item actions are processed.",
                        "items": {
                          "description": "BackupResourceHook defines a hook for a resource.",
                          "properties": {
                            "exec": {
                              "description": "Exec defines an exec hook.",
                              "properties": {
                                "command": {
                                  "description": "Command is the command and arguments to execute.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "minItems": 1,
                                  "type": "array"
                                },
                                "container": {
                                  "description": "Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.",
                                  "type": "string"
                                },
                                "onError": {
                                  "description": "OnError specifies how Velero should behave if it encounters an error executing this hook.",
                                  "enum": [
                                    "Continue",
                                    "Fail"
                                  ],
                                  "type": "string"
                                },
                                "timeout": {
                                  "description": "Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "command"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "exec"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "nullable": true,
                  "type": "array"
                }
              },
              "type": "object"
            },
            "includeClusterResources": {
              "description": "IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.",
              "nullable": true,
              "type": "boolean"
            },
            "includedNamespaces": {
              "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "includedResources": {
              "description": "IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "labelSelector": {
              "description": "LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.",
              "nullable": true,
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "key",
                      "operator"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "snapshotVolumes": {
              "description": "SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.",
              "nullable": true,
              "type": "boolean"
            },
            "storageLocation": {
              "description": "StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.",
              "type": "string"
            },
            "ttl": {
              "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for.",
              "type": "string"
            },
            "volumeSnapshotLocations": {
              "description": "VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "v1.BackupList": {
      "description": "BackupList is a list of Backup",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of backups. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Backup"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "type": "object",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
              "type": "string"
            },
            "remainingItemCount": {
              "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
              "type": "integer",
              "format": "int64"
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": "string"
            }
          }
        }
      }
    },
    "v1.BackupStorageLocation": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "description": "BackupStorageLocationStatus describes the current status of a Velero BackupStorageLocation.",
          "properties": {
            "accessMode": {
              "description": "AccessMode is an unused field. \n Deprecated: there is now an AccessMode field on the Spec and this field will be removed entirely as of v2.0.",
              "enum": [
                "ReadOnly",
                "ReadWrite"
              ],
              "type": "string"
            },
            "lastSyncedRevision": {
              "description": "LastSyncedRevision is the value of the `metadata/revision` file in the backup storage location the last time the BSL's contents were synced into the cluster. \n Deprecated: this field is no longer updated or used for detecting changes to the location's contents and will be removed entirely in v2.0.",
              "type": "string"
            },
            "lastSyncedTime": {
              "description": "LastSyncedTime is the last time the contents of the location were synced into the cluster.",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "phase": {
              "description": "Phase is the current state of the BackupStorageLocation.",
              "enum": [
                "Available",
                "Unavailable"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        "spec": {
          "description": "BackupStorageLocationSpec defines the specification for a Velero BackupStorageLocation.",
          "properties": {
            "accessMode": {
              "description": "AccessMode defines the permissions for the backup storage location.",
              "enum": [
                "ReadOnly",
                "ReadWrite"
              ],
              "type": "string"
            },
            "backupSyncPeriod": {
              "description": "BackupSyncPeriod defines how frequently to sync backup API objects from object storage. A value of 0 disables sync.",
              "nullable": true,
              "type": "string"
            },
            "config": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Config is for provider-specific configuration fields.",
              "type": "object"
            },
            "objectStorage": {
              "description": "ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.",
              "properties": {
                "bucket": {
                  "description": "Bucket is the bucket to use for object storage.",
                  "type": "string"
                },
                "prefix": {
                  "description": "Prefix is the path inside a bucket to use for Velero storage. Optional.",
                  "type": "string"
                }
              },
              "required": [
                "bucket"
              ],
              "type": "object"
            },
            "provider": {
              "description": "Provider is the provider of the backup storage.",
              "type": "string"
            }
          },
          "required": [
            "objectStorage",
            "provider"
          ],
          "type": "object"
        }
      }
    },
    "v1.BackupStorageLocationList": {
      "description": "BackupStorageLocationList is a list of BackupStorageLocation",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of backupstoragelocations. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.BackupStorageLocation"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "type": "object",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
              "type": "string"
            },
            "remainingItemCount": {
              "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
              "type": "integer",
              "format": "int64"
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": "string"
            }
          }
        }
      }
    },
    "v1.DeleteBackupRequest": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "description": "DeleteBackupRequestStatus is the current status of a DeleteBackupRequest.",
          "properties": {
            "errors": {
              "description": "Errors contains any errors that were encountered during the deletion process.",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "phase": {
              "description": "Phase is the current state of the DeleteBackupRequest.",
              "enum": [
                "New",
                "InProgress",
                "Processed"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        "spec": {
          "description": "DeleteBackupRequestSpec is the specification for which backups to delete.",
          "properties": {
            "backupName": {
              "type": "string"
            }
          },
          "required": [
            "backupName"
          ],
          "type": "object"
        }
      }
    },
    "v1.DeleteBackupRequestList": {
      "description": "DeleteBackupRequestList is a list of DeleteBackupRequest",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of deletebackuprequests. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.DeleteBackupRequest"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "type": "object",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
              "type": "string"
            },
            "remainingItemCount": {
              "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
              "type": "integer",
              "format": "int64"
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": "string"
            }
          }
        }
      }
    },
    "v1.DownloadRequest": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "description": "DownloadRequestStatus is the current status of a DownloadRequest.",
          "properties": {
            "downloadURL": {
              "description": "DownloadURL contains the pre-signed URL for the target file.",
              "type": "string"
            },
            "expiration": {
              "description": "Expiration is when this DownloadRequest expires and can be deleted by the system.",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "phase": {
              "description": "Phase is the current state of the DownloadRequest.",
              "enum": [
                "New",
                "Processed"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        "spec": {
          "description": "DownloadRequestSpec is the specification for a download request.",
          "properties": {
            "target": {
              "description": "Target is what to download (e.g. logs for a backup).",
              "properties": {
                "kind": {
                  "description": "Kind is the type of file to download.",
                  "enum": [
                    "BackupLog",
                    "BackupContents",
                    "BackupVolumeSnapshots",
                    "BackupResourceList",
                    "RestoreLog",
                    "RestoreResults"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name is the name of the kubernetes resource with which the file is associated.",
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object"
            }
          },
          "required": [
            "target"
          ],
          "type": "object"
        }
      }
    },
    "v1.DownloadRequestList": {
      "description": "DownloadRequestList is a list of DownloadRequest",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of downloadrequests. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.DownloadRequest"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "type": "object",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
              "type": "string"
            },
            "remainingItemCount": {
              "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
              "type": "integer",
              "format": "int64"
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": "string"
            }
          }
        }
      }
    },
    "v1.PodVolumeBackup": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "description": "PodVolumeBackupStatus is the current status of a PodVolumeBackup.",
          "properties": {
            "completionTimestamp": {
              "description": "CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "message": {
              "description": "Message is a message about the pod volume backup's status.",
              "type": "string"
            },
            "path": {
              "description": "Path is the full path within the controller pod being backed up.",
              "type": "string"
            },
            "phase": {
              "description": "Phase is the current state of the PodVolumeBackup.",
              "enum": [
                "New",
                "InProgress",
                "Completed",
                "Failed"
              ],
              "type": "string"
            },
            "progress": {
              "description": "Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.",
              "properties": {
                "bytesDone": {
                  "format": "int64",
                  "type": "integer"
                },
                "totalBytes": {
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "snapshotID": {
              "description": "SnapshotID is the identifier for the snapshot of the pod volume.",
              "type": "string"
            },
            "startTimestamp": {
              "description": "StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "spec": {
          "description": "PodVolumeBackupSpec is the specification for a PodVolumeBackup.",
          "properties": {
            "backupStorageLocation": {
              "description": "BackupStorageLocation is the name of the backup storage location where the restic repository is stored.",
              "type": "string"
            },
            "node": {
              "description": "Node is the name of the node that the Pod is running on.",
              "type": "string"
            },
            "pod": {
              "description": "Pod is a reference to the pod containing the volume to be backed up.",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "repoIdentifier": {
              "description": "RepoIdentifier is the restic repository identifier.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags are a map of key-value pairs that should be applied to the volume backup as tags.",
              "type": "object"
            },
            "volume": {
              "description": "Volume is the name of the volume within the Pod to be backed up.",
              "type": "string"
            }
          },
          "required": [
            "backupStorageLocation",
            "node",
            "pod",
            "repoIdentifier",
            "volume"
          ],
          "type": "object"
        }
      }
    },
    "v1.PodVolumeBackupList": {
      "description": "PodVolumeBackupList is a list of PodVolumeBackup",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of podvolumebackups. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PodVolumeBackup"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "type": "object",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
              "type": "string"
            },
            "remainingItemCount": {
              "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
              "type": "integer",
              "format": "int64"
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": "string"
            }
          }
        }
      }
    },
    "v1.PodVolumeRestore": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "description": "PodVolumeRestoreStatus is the current status of a PodVolumeRestore.",
          "properties": {
            "completionTimestamp": {
              "description": "CompletionTimestamp records the time a restore was completed. Completion time is recorded even on failed restores. The server's time is used for CompletionTimestamps",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "message": {
              "description": "Message is a message about the pod volume restore's status.",
              "type": "string"
            },
            "phase": {
              "description": "Phase is the current state of the PodVolumeRestore.",
              "enum": [
                "New",
                "InProgress",
                "Completed",
                "Failed"
              ],
              "type": "string"
            },
            "progress": {
              "description": "Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.",
              "properties": {
                "bytesDone": {
                  "format": "int64",
                  "type": "integer"
                },
                "totalBytes": {
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "startTimestamp": {
              "description": "StartTimestamp records the time a restore was started. The server's time is used for StartTimestamps",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "spec": {
          "description": "PodVolumeRestoreSpec is the specification for a PodVolumeRestore.",
          "properties": {
            "backupStorageLocation": {
              "description": "BackupStorageLocation is the name of the backup storage location where the restic repository is stored.",
              "type": "string"
            },
            "pod": {
              "description": "Pod is a reference to the pod containing the volume to be restored.",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "repoIdentifier": {
              "description": "RepoIdentifier is the restic repository identifier.",
              "type": "string"
            },
            "snapshotID": {
              "description": "SnapshotID is the ID of the volume snapshot to be restored.",
              "type": "string"
            },
            "volume": {
              "description": "Volume is the name of the volume within the Pod to be restored.",
              "type": "string"
            }
          },
          "required": [
            "backupStorageLocation",
            "pod",
            "repoIdentifier",
            "snapshotID",
            "volume"
          ],
          "type": "object"
        }
      }
    },
    "v1.PodVolumeRestoreList": {
      "description": "PodVolumeRestoreList is a list of PodVolumeRestore",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of podvolumerestores. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PodVolumeRestore"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "type": "object",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
              "type": "string"
            },
            "remainingItemCount": {
              "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
              "type": "integer",
              "format": "int64"
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": "string"
            }
          }
        }
      }
    },
    "v1.ResticRepository": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "description": "ResticRepositoryStatus is the current status of a ResticRepository.",
          "properties": {
            "lastMaintenanceTime": {
              "description": "LastMaintenanceTime is the last time maintenance was run.",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "message": {
              "description": "Message is a message about the current status of the ResticRepository.",
              "type": "string"
            },
            "phase": {
              "description": "Phase is the current state of the ResticRepository.",
              "enum": [
                "New",
                "Ready",
                "NotReady"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        "spec": {
          "description": "ResticRepositorySpec is the specification for a ResticRepository.",
          "properties": {
            "backupStorageLocation": {
              "description": "BackupStorageLocation is the name of the BackupStorageLocation that should contain this repository.",
              "type": "string"
            },
            "maintenanceFrequency": {
              "description": "MaintenanceFrequency is how often maintenance should be run.",
              "type": "string"
            },
            "resticIdentifier": {
              "description": "ResticIdentifier is the full restic-compatible string for identifying this repository.",
              "type": "string"
            },
            "volumeNamespace": {
              "description": "VolumeNamespace is the namespace this restic repository contains pod volume backups for.",
              "type": "string"
            }
          },
          "required": [
            "backupStorageLocation",
            "maintenanceFrequency",
            "resticIdentifier",
            "volumeNamespace"
          ],
          "type": "object"
        }
      }
    },
    "v1.ResticRepositoryList": {
      "description": "ResticRepositoryList is a list of ResticRepository",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of resticrepositories. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ResticRepository"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "type": "object",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
              "type": "string"
            },
            "remainingItemCount": {
              "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
              "type": "integer",
              "format": "int64"
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": "string"
            }
          }
        }
      }
    },
    "v1.Restore": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "description": "RestoreStatus captures the current status of a Velero restore",
          "properties": {
            "errors": {
              "description": "Errors is a count of all error messages that were generated during execution of the restore. The actual errors are stored in object storage.",
              "type": "integer"
            },
            "failureReason": {
              "description": "FailureReason is an error that caused the entire restore to fail.",
              "type": "string"
            },
            "phase": {
              "description": "Phase is the current state of the Restore",
              "enum": [
                "New",
                "FailedValidation",
                "InProgress",
                "Completed",
                "PartiallyFailed",
                "Failed"
              ],
              "type": "string"
            },
            "validationErrors": {
              "description": "ValidationErrors is a slice of all validation errors (if applicable)",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "warnings": {
              "description": "Warnings is a count of all warning messages that were generated during execution of the restore. The actual warnings are stored in object storage.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "spec": {
          "description": "RestoreSpec defines the specification for a Velero restore.",
          "properties": {
            "backupName": {
              "description": "BackupName is the unique name of the Velero backup to restore from.",
              "type": "string"
            },
            "excludedNamespaces": {
              "description": "ExcludedNamespaces contains a list of namespaces that are not included in the restore.",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "excludedResources": {
              "description": "ExcludedResources is a slice of resource names that are not included in the restore.",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "includeClusterResources": {
              "description": "IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the restore. If null, defaults to true.",
              "nullable": true,
              "type": "boolean"
            },
            "includedNamespaces": {
              "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "includedResources": {
              "description": "IncludedResources is a slice of resource names to include in the restore. If empty, all resources in the backup are included.",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "labelSelector": {
              "description": "LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.",
              "nullable": true,
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "key",
                      "operator"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "namespaceMapping": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.",
              "type": "object"
            },
            "restorePVs": {
              "description": "RestorePVs specifies whether to restore all included PVs from snapshot (via the cloudprovider).",
              "nullable": true,
              "type": "boolean"
            },
            "scheduleName": {
              "description": "ScheduleName is the unique name of the Velero schedule to restore from. If specified, and BackupName is empty, Velero will restore from the most recent successful backup created from this schedule.",
              "type": "string"
            }
          },
          "required": [
            "backupName"
          ],
          "type": "object"
        }
      }
    },
    "v1.RestoreList": {
      "description": "RestoreList is a list of Restore",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of restores. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Restore"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "type": "object",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
              "type": "string"
            },
            "remainingItemCount": {
              "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
              "type": "integer",
              "format": "int64"
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": "string"
            }
          }
        }
      }
    },
    "v1.Schedule": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "description": "ScheduleStatus captures the current state of a Velero schedule",
          "properties": {
            "lastBackup": {
              "description": "LastBackup is the last time a Backup was run for this Schedule schedule",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "phase": {
              "description": "Phase is the current phase of the Schedule",
              "enum": [
                "New",
                "Enabled",
                "FailedValidation"
              ],
              "type": "string"
            },
            "validationErrors": {
              "description": "ValidationErrors is a slice of all validation errors (if applicable)",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "spec": {
          "description": "ScheduleSpec defines the specification for a Velero schedule",
          "properties": {
            "schedule": {
              "description": "Schedule is a Cron expression defining when to run the Backup.",
              "type": "string"
            },
            "template": {
              "description": "Template is the definition of the Backup to be run on the provided schedule",
              "properties": {
                "excludedNamespaces": {
                  "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup.",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "excludedResources": {
                  "description": "ExcludedResources is a slice of resource names that are not included in the backup.",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "hooks": {
                  "description": "Hooks represent custom behaviors that should be executed at different phases of the backup.",
                  "properties": {
                    "resources": {
                      "description": "Resources are hooks that should be executed when backing up individual instances of a resource.",
                      "items": {
                        "description": "BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.",
                        "properties": {
                          "excludedNamespaces": {
                            "description": "ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "type": "array"
                          },
                          "excludedResources": {
                            "description": "ExcludedResources specifies the resources to which this hook spec does not apply.",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "type": "array"
                          },
                          "includedNamespaces": {
                            "description": "IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "type": "array"
                          },
                          "includedResources": {
                            "description": "IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "type": "array"
                          },
                          "labelSelector": {
                            "description": "LabelSelector, if specified, filters the resources to which this hook spec applies.",
                            "nullable": true,
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "matchLabels": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "name": {
                            "description": "Name is the name of this hook.",
                            "type": "string"
                          },
                          "post": {
                            "description": "PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all \"additional items\" from item actions are processed.",
                            "items": {
                              "description": "BackupResourceHook defines a hook for a resource.",
                              "properties": {
                                "exec": {
                                  "description": "Exec defines an exec hook.",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command and arguments to execute.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minItems": 1,
                                      "type": "array"
                                    },
                                    "container": {
                                      "description": "Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.",
                                      "type": "string"
                                    },
                                    "onError": {
                                      "description": "OnError specifies how Velero should behave if it encounters an error executing this hook.",
                                      "enum": [
                                        "Continue",
                                        "Fail"
                                      ],
                                      "type": "string"
                                    },
                                    "timeout": {
                                      "description": "Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "command"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "exec"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "pre": {
                            "description": "PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any \"additional items\" from item actions are processed.",
                            "items": {
                              "description": "BackupResourceHook defines a hook for a resource.",
                              "properties": {
                                "exec": {
                                  "description": "Exec defines an exec hook.",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command and arguments to execute.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minItems": 1,
                                      "type": "array"
                                    },
                                    "container": {
                                      "description": "Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.",
                                      "type": "string"
                                    },
                                    "onError": {
                                      "description": "OnError specifies how Velero should behave if it encounters an error executing this hook.",
                                      "enum": [
                                        "Continue",
                                        "Fail"
                                      ],
                                      "type": "string"
                                    },
                                    "timeout": {
                                      "description": "Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "command"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "exec"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "includeClusterResources": {
                  "description": "IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.",
                  "nullable": true,
                  "type": "boolean"
                },
                "includedNamespaces": {
                  "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "includedResources": {
                  "description": "IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "labelSelector": {
                  "description": "LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.",
                  "nullable": true,
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "key",
                          "operator"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "matchLabels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "snapshotVolumes": {
                  "description": "SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.",
                  "nullable": true,
                  "type": "boolean"
                },
                "storageLocation": {
                  "description": "StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.",
                  "type": "string"
                },
                "ttl": {
                  "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for.",
                  "type": "string"
                },
                "volumeSnapshotLocations": {
                  "description": "VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "schedule",
            "template"
          ],
          "type": "object"
        }
      }
    },
    "v1.ScheduleList": {
      "description": "ScheduleList is a list of Schedule",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of schedules. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Schedule"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "type": "object",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
              "type": "string"
            },
            "remainingItemCount": {
              "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
              "type": "integer",
              "format": "int64"
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": "string"
            }
          }
        }
      }
    },
    "v1.ServerStatusRequest": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "description": "ServerStatusRequestStatus is the current status of a ServerStatusRequest.",
          "properties": {
            "phase": {
              "description": "Phase is the current lifecycle phase of the ServerStatusRequest.",
              "enum": [
                "New",
                "Processed"
              ],
              "type": "string"
            },
            "plugins": {
              "description": "Plugins list information about the plugins running on the Velero server",
              "items": {
                "description": "PluginInfo contains attributes of a Velero plugin",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object"
              },
              "nullable": true,
              "type": "array"
            },
            "processedTimestamp": {
              "description": "ProcessedTimestamp is when the ServerStatusRequest was processed by the ServerStatusRequestController.",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "serverVersion": {
              "description": "ServerVersion is the Velero server version.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "spec": {
          "description": "ServerStatusRequestSpec is the specification for a ServerStatusRequest.",
          "type": "object"
        }
      }
    },
    "v1.ServerStatusRequestList": {
      "description": "ServerStatusRequestList is a list of ServerStatusRequest",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of serverstatusrequests. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ServerStatusRequest"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "type": "object",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
              "type": "string"
            },
            "remainingItemCount": {
              "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
              "type": "integer",
              "format": "int64"
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": "string"
            }
          }
        }
      }
    },
    "v1.VolumeSnapshotLocation": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "status": {
          "description": "VolumeSnapshotLocationStatus describes the current status of a Velero VolumeSnapshotLocation.",
          "properties": {
            "phase": {
              "description": "VolumeSnapshotLocationPhase is the lifecyle phase of a Velero VolumeSnapshotLocation.",
              "enum": [
                "Available",
                "Unavailable"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        "spec": {
          "description": "VolumeSnapshotLocationSpec defines the specification for a Velero VolumeSnapshotLocation.",
          "properties": {
            "config": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Config is for provider-specific configuration fields.",
              "type": "object"
            },
            "provider": {
              "description": "Provider is the provider of the volume storage.",
              "type": "string"
            }
          },
          "required": [
            "provider"
          ],
          "type": "object"
        }
      }
    },
    "v1.VolumeSnapshotLocationList": {
      "description": "VolumeSnapshotLocationList is a list of VolumeSnapshotLocation",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of volumesnapshotlocations. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.VolumeSnapshotLocation"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "type": "object",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
              "type": "string"
            },
            "remainingItemCount": {
              "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
              "type": "integer",
              "format": "int64"
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": "string"
            }
          }
        }
      }
    }
  }
}
